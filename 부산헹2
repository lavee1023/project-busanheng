#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include <time.h>

#define t_MIN 15                                  // 기차길이
#define t_MAX 50
#define p_MIN 10                                  //시민 확률
#define p_MAX 90
#define zzp_MIN 10                                //좀비 확률
#define zzp_MAX 90
#define stm_MIN 0                                 //마동석 체력
#define stm_MAX 5
#define agg_MIN 0                                //어그로 범위
#define agg_MAX 5

//마동석 이동 방향
#define movel 1
#define moves 0

//좀비의 공격 대상
#define atk_n 0
#define atk_p 1
#define atk_m 2

//마동석 행동
#define act_r 0
#define act_pr 1
#define act_pu 2

//int m, z, c, t, p, zzp;                         //m 마동석, z 좀비 c 시민, t 기차의 길이, p 시민 이동 확률, zzp 좀비 이동 확률
//int cp, zp, mp;                                 //cp 시민 위치, zp 좀비 위치, mp 마동석 위치
//int pp, zzpp;                                   //pp 100-p, zzpp 100-zzp
//int count = 0;
int stm;
int agg;
//int cagg;                                       //시민 어그로
int act;

int ts(int t) {
	for (int i = 1; i <= t; i++) {                 // 열차 초기 상태 출력 1-1
		printf("*");
	}
	printf("\n");

	return 0;
}

int chp(int t, int cp, int zp, int mp) {
	printf("*");
	for (int i = 1; i <= t - 2; i++) {
		if (i == cp) printf("c");

		else if (i == zp) printf("z");
		
		else if (i == mp) printf("m");
		
		else printf(" ");
	}
	printf("*\n");

	return 0;
}

int tp(int t, int cp, int zp, int mp) {
	
	ts(t);
	
	chp(t, cp, zp, mp);
	
	ts(t);

	return 0;
}

int cagg1(int pp, int p, int cagg) {
		if (pp > p) {
			if (cagg < 5) ++cagg;
		}

	return 0;
}

int tpm(int t, int p, int zzp, int cp, int zp, int mp) {
	int count = 0;
	int cagg = 1;

	
	while (1) {
		int pp = rand() % 100 + 1;                  // 시민 확률 난수 생성
		int zzpp = rand() % 100 + 1;                // 좀비 확률 난수 생성
		++count;                                    // 턴 증가
		if (count % 2 == 1 && zzpp <= zzp) --zp;    // 좀비 이동 조건 만족시 좀비 위치 -1 1-5
		if (pp > p) {
			--cp;                           // 시민 이동 조건 만족시 시민 위치 -1 1-4
			if (cagg < 6) ++cagg;
		}
		else if (cagg > -1) --cagg;
		tp(t, cp, zp, mp);
		cmm(pp, p, cp, count, zzpp, zzp, zp, cagg);
		int result = er(cp, zp);
		if (result != 0) break;
	}
	return 0;
}

int er(int cp, int zp) {
	if (cp == 1) {
		printf("SUCCESS!\n시민(들)이 다음 칸으로 탈출했습니다.\n");
		
		return 1;
	}
	if (zp == cp + 1) {
		printf("GAME OVER!\n시민(들)이 좀비에게 공격당해 사망했습니다.\n");
		
		return 1;
	}
	
	return 0;
}

int cmm(int pp, int p, int cp, int count, int zzpp, int zzp, int zp, int cagg) {
	printf("\n\n\n");
	if (pp > p) {
		if(cagg == 6) printf("시민 : %d -> %d (어그로: %d -> %d)\n", cp + 1, cp, cagg - 1, cagg - 1);
		else printf("시민 : %d -> %d (어그로: %d -> %d)\n", cp + 1, cp, cagg - 1, cagg);
	}
	else {
		if(cagg == -1) printf("시민 : %d에서 정지 (어그로: %d -> %d)\n", cp, cagg + 1, cagg + 1);
		else if(cagg == 5) printf("시민 : %d에서 정지 (어그로: %d -> %d)\n", cp, cagg, cagg - 1);
		else printf("시민 : %d에서 정지 (어그로: %d -> %d)\n", cp, cagg + 1, cagg);
	}
	if (count % 2 == 1 && zzpp <= zzp) {
		printf("좀비 : %d -> %d\n\n\n", zp + 1, zp);
	}
	else {
		printf("좀비 : %d에서 정지(움직일 수 없습니다.)\n", zp);
	}
	printf("\n\n\n");
	return 0;
}

int mdsr(int stm, int agg, int m, int mp) {
	
}

int main(void) {
	srand((unsigned int)time(NULL));
	int t, p, zzp, cp, zp, mp, cagg;

	printf("부산헹 시작");                                //인트로
	Sleep(1000);
	printf("\n\n\n");

	while(1) {
		printf("기차의 길이(15 ~ 50) >> ");
		scanf_s("%d", &t);
		if (t >= t_MIN && t <= t_MAX) {                   // 입력 오류시 다시 입력
			break;
		}
	}
	printf("\n");

	while (1) {
		printf("마동석 스테미나(0 ~ 5) >> ");
		scanf_s("%d", &stm);
		if (stm >= stm_MIN && stm <= stm_MAX) {          // 입력 오류시 다시 입력
			break;
		}
	}
	printf("\n");

	while (1) {
		printf("시민 이동 확률(10 ~ 90) >> ");
		scanf_s("%d", &p);

		if (p >= p_MIN && p <= p_MAX) {                  // 입력 오류시 다시 입력
			break;
		}
	}

    while(1) {
		printf("좀비 이동 확률(10 ~ 90) >> ");
		scanf_s("%d", &zzp);

		if (zzp >= zzp_MIN && zzp <= zzp_MAX) {            // 입력 오류시 다시 입력
			break;
		}
	}
	printf("\n\n\n");

	cp = t - 6;
	zp = t - 3;
	mp = t - 2;

	printf("열차 초기 상태입니다.\n");

	tp(t, cp, zp, mp);

	printf("\n\n\n");

	tpm(t, p, zzp, cp, zp, mp);

	return 0;
}
